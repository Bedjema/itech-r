"use strict";(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[430],{4745:function(__unused_webpack_module,exports,__webpack_require__){var AlignEnum,EmphasisEnum,SubtitleListResponseStyle,EmphasisStylesEnum,SubtitleSourceEnum,SubtitleStatusEnum,SubtitleStyleCreateBody,EmphasisStylesEnum1,SubtitleStyleListResponseData,EmphasisStylesEnum2,SubtitleStyleUpdateBody,EmphasisStylesEnum3,SynthesisProvider,TranscriptionProviderEnum,VoiceCloneErrorReasonEnum,VoiceCloneProviderEnum,VoiceCloneStatusEnum,VoiceGenderEnum,__createBinding=this&&this.__createBinding||(Object.create?function(o,m,k,k2){void 0===k2&&(k2=k);var desc=Object.getOwnPropertyDescriptor(m,k);(!desc||("get"in desc?!m.__esModule:desc.writable||desc.configurable))&&(desc={enumerable:!0,get:function(){return m[k]}}),Object.defineProperty(o,k2,desc)}:function(o,m,k,k2){void 0===k2&&(k2=k),o[k2]=m[k]}),__setModuleDefault=this&&this.__setModuleDefault||(Object.create?function(o,v){Object.defineProperty(o,"default",{enumerable:!0,value:v})}:function(o,v){o.default=v}),__importStar=this&&this.__importStar||function(mod){if(mod&&mod.__esModule)return mod;var result={};if(null!=mod)for(var k in mod)"default"!==k&&Object.prototype.hasOwnProperty.call(mod,k)&&__createBinding(result,mod,k);return __setModuleDefault(result,mod),result};Object.defineProperty(exports,"__esModule",{value:!0}),exports.VoiceCloneApi=exports.VoiceCloneApiFactory=exports.VoiceCloneApiFp=exports.VoiceCloneApiFetchParamCreator=exports.SynthesizeSpeechApi=exports.SynthesizeSpeechApiFactory=exports.SynthesizeSpeechApiFp=exports.SynthesizeSpeechApiFetchParamCreator=exports.SubtitlesApi=exports.SubtitlesApiFactory=exports.SubtitlesApiFp=exports.SubtitlesApiFetchParamCreator=exports.SubtitleWebhooksApi=exports.SubtitleWebhooksApiFactory=exports.SubtitleWebhooksApiFp=exports.SubtitleWebhooksApiFetchParamCreator=exports.SubtitleTranslationsApi=exports.SubtitleTranslationsApiFactory=exports.SubtitleTranslationsApiFp=exports.SubtitleTranslationsApiFetchParamCreator=exports.SubtitleTranscriptionsApi=exports.SubtitleTranscriptionsApiFactory=exports.SubtitleTranscriptionsApiFp=exports.SubtitleTranscriptionsApiFetchParamCreator=exports.SubtitleStylesApi=exports.SubtitleStylesApiFactory=exports.SubtitleStylesApiFp=exports.SubtitleStylesApiFetchParamCreator=exports.CustomVocabularyApi=exports.CustomVocabularyApiFactory=exports.CustomVocabularyApiFp=exports.CustomVocabularyApiFetchParamCreator=exports.VoiceGenderEnum=exports.VoiceCloneStatusEnum=exports.VoiceCloneProviderEnum=exports.VoiceCloneErrorReasonEnum=exports.TranscriptionProviderEnum=exports.SynthesisProvider=exports.SubtitleStyleUpdateBody=exports.SubtitleStyleListResponseData=exports.SubtitleStyleCreateBody=exports.SubtitleStatusEnum=exports.SubtitleSourceEnum=exports.SubtitleListResponseStyle=exports.EmphasisEnum=exports.AlignEnum=exports.RequiredError=exports.BaseAPI=exports.COLLECTION_FORMATS=void 0;let url=__importStar(__webpack_require__(8398)),isomorphicFetch=__importStar(__webpack_require__(9307)),BASE_PATH="https://www.veed.dev/api".replace(/\/+$/,"");exports.COLLECTION_FORMATS={csv:",",ssv:" ",tsv:"	",pipes:"|"};class BaseAPI{constructor(configuration,basePath=BASE_PATH,fetch=isomorphicFetch){this.basePath=basePath,this.fetch=fetch,configuration&&(this.configuration=configuration,this.basePath=configuration.basePath||this.basePath)}}exports.BaseAPI=BaseAPI;class RequiredError extends Error{constructor(field,msg){super(msg),this.field=field,this.name="RequiredError"}}exports.RequiredError=RequiredError,(AlignEnum=exports.AlignEnum||(exports.AlignEnum={}))[AlignEnum.Left="left"]="Left",AlignEnum[AlignEnum.Right="right"]="Right",AlignEnum[AlignEnum.Center="center"]="Center",AlignEnum[AlignEnum.Justify="justify"]="Justify",(EmphasisEnum=exports.EmphasisEnum||(exports.EmphasisEnum={}))[EmphasisEnum.None="none"]="None",EmphasisEnum[EmphasisEnum.Normal="normal"]="Normal",EmphasisEnum[EmphasisEnum.Bold="bold"]="Bold",EmphasisEnum[EmphasisEnum.Italic="italic"]="Italic",(EmphasisStylesEnum=(SubtitleListResponseStyle=exports.SubtitleListResponseStyle||(exports.SubtitleListResponseStyle={})).EmphasisStylesEnum||(SubtitleListResponseStyle.EmphasisStylesEnum={}))[EmphasisStylesEnum.Bold="bold"]="Bold",EmphasisStylesEnum[EmphasisStylesEnum.Italic="italic"]="Italic",(SubtitleSourceEnum=exports.SubtitleSourceEnum||(exports.SubtitleSourceEnum={}))[SubtitleSourceEnum.Subtitles="subtitles"]="Subtitles",SubtitleSourceEnum[SubtitleSourceEnum.MagicCut="magicCut"]="MagicCut",SubtitleSourceEnum[SubtitleSourceEnum.VoiceCloneVerification="voiceCloneVerification"]="VoiceCloneVerification",SubtitleSourceEnum[SubtitleSourceEnum.Internal="internal"]="Internal",SubtitleSourceEnum[SubtitleSourceEnum.Dubbing="dubbing"]="Dubbing",SubtitleSourceEnum[SubtitleSourceEnum.Clip="clip"]="Clip",(SubtitleStatusEnum=exports.SubtitleStatusEnum||(exports.SubtitleStatusEnum={}))[SubtitleStatusEnum.Pending="pending"]="Pending",SubtitleStatusEnum[SubtitleStatusEnum.Active="active"]="Active",SubtitleStatusEnum[SubtitleStatusEnum.Error="error"]="Error",(EmphasisStylesEnum1=(SubtitleStyleCreateBody=exports.SubtitleStyleCreateBody||(exports.SubtitleStyleCreateBody={})).EmphasisStylesEnum||(SubtitleStyleCreateBody.EmphasisStylesEnum={}))[EmphasisStylesEnum1.Bold="bold"]="Bold",EmphasisStylesEnum1[EmphasisStylesEnum1.Italic="italic"]="Italic",(EmphasisStylesEnum2=(SubtitleStyleListResponseData=exports.SubtitleStyleListResponseData||(exports.SubtitleStyleListResponseData={})).EmphasisStylesEnum||(SubtitleStyleListResponseData.EmphasisStylesEnum={}))[EmphasisStylesEnum2.Bold="bold"]="Bold",EmphasisStylesEnum2[EmphasisStylesEnum2.Italic="italic"]="Italic",(EmphasisStylesEnum3=(SubtitleStyleUpdateBody=exports.SubtitleStyleUpdateBody||(exports.SubtitleStyleUpdateBody={})).EmphasisStylesEnum||(SubtitleStyleUpdateBody.EmphasisStylesEnum={}))[EmphasisStylesEnum3.Bold="bold"]="Bold",EmphasisStylesEnum3[EmphasisStylesEnum3.Italic="italic"]="Italic",(SynthesisProvider=exports.SynthesisProvider||(exports.SynthesisProvider={}))[SynthesisProvider.Azure="azure"]="Azure",SynthesisProvider[SynthesisProvider.Playht="playht"]="Playht",SynthesisProvider[SynthesisProvider.ElevenLabs="elevenLabs"]="ElevenLabs",(TranscriptionProviderEnum=exports.TranscriptionProviderEnum||(exports.TranscriptionProviderEnum={}))[TranscriptionProviderEnum.AssemblyAi="assemblyAi"]="AssemblyAi",TranscriptionProviderEnum[TranscriptionProviderEnum.Deepgram="deepgram"]="Deepgram",TranscriptionProviderEnum[TranscriptionProviderEnum.Gladia="gladia"]="Gladia",TranscriptionProviderEnum[TranscriptionProviderEnum.Google="google"]="Google",TranscriptionProviderEnum[TranscriptionProviderEnum.GoogleV2="googleV2"]="GoogleV2",(VoiceCloneErrorReasonEnum=exports.VoiceCloneErrorReasonEnum||(exports.VoiceCloneErrorReasonEnum={}))[VoiceCloneErrorReasonEnum.Unknown="unknown"]="Unknown",VoiceCloneErrorReasonEnum[VoiceCloneErrorReasonEnum.VerificationError="verificationError"]="VerificationError",VoiceCloneErrorReasonEnum[VoiceCloneErrorReasonEnum.ProviderError="providerError"]="ProviderError",VoiceCloneErrorReasonEnum[VoiceCloneErrorReasonEnum.InternalError="internalError"]="InternalError",(VoiceCloneProviderEnum=exports.VoiceCloneProviderEnum||(exports.VoiceCloneProviderEnum={}))[VoiceCloneProviderEnum.Playht="playht"]="Playht",VoiceCloneProviderEnum[VoiceCloneProviderEnum.ElevenLabs="elevenLabs"]="ElevenLabs",(VoiceCloneStatusEnum=exports.VoiceCloneStatusEnum||(exports.VoiceCloneStatusEnum={}))[VoiceCloneStatusEnum.PendingVerification="pendingVerification"]="PendingVerification",VoiceCloneStatusEnum[VoiceCloneStatusEnum.PendingCreation="pendingCreation"]="PendingCreation",VoiceCloneStatusEnum[VoiceCloneStatusEnum.Active="active"]="Active",VoiceCloneStatusEnum[VoiceCloneStatusEnum.Error="error"]="Error",(VoiceGenderEnum=exports.VoiceGenderEnum||(exports.VoiceGenderEnum={}))[VoiceGenderEnum.Female="Female"]="Female",VoiceGenderEnum[VoiceGenderEnum.Male="Male"]="Male",VoiceGenderEnum[VoiceGenderEnum.Other="Other"]="Other",VoiceGenderEnum[VoiceGenderEnum._0="0"]="_0",VoiceGenderEnum[VoiceGenderEnum._1="1"]="_1",VoiceGenderEnum[VoiceGenderEnum._2="2"]="_2",exports.CustomVocabularyApiFetchParamCreator=function(configuration){return{getCustomVocabulary(workspaceId,options={}){if(null==workspaceId)throw new RequiredError("workspaceId","Required parameter workspaceId was null or undefined when calling getCustomVocabulary.");let localVarPath="/v1/subtitles/custom-vocabulary/{workspaceId}".replace("{workspaceId}",encodeURIComponent(String(workspaceId))),localVarUrlObj=url.parse(localVarPath,!0),localVarRequestOptions=Object.assign({method:"GET"},options);return localVarUrlObj.query=Object.assign({},localVarUrlObj.query,{},options.query),localVarUrlObj.search=null,localVarRequestOptions.headers=Object.assign({},{},options.headers),{url:url.format(localVarUrlObj),options:localVarRequestOptions}},updateCustomVocabulary(workspaceId,body,options={}){if(null==workspaceId)throw new RequiredError("workspaceId","Required parameter workspaceId was null or undefined when calling updateCustomVocabulary.");let localVarPath="/v1/subtitles/custom-vocabulary/{workspaceId}".replace("{workspaceId}",encodeURIComponent(String(workspaceId))),localVarUrlObj=url.parse(localVarPath,!0),localVarRequestOptions=Object.assign({method:"PUT"},options),localVarHeaderParameter={};return localVarHeaderParameter["Content-Type"]="application/json",localVarUrlObj.query=Object.assign({},localVarUrlObj.query,{},options.query),localVarUrlObj.search=null,localVarRequestOptions.headers=Object.assign({},localVarHeaderParameter,options.headers),localVarRequestOptions.body=JSON.stringify(body||{}),{url:url.format(localVarUrlObj),options:localVarRequestOptions}}}},exports.CustomVocabularyApiFp=function(configuration){return{getCustomVocabulary(workspaceId,options){let localVarFetchArgs=(0,exports.CustomVocabularyApiFetchParamCreator)(configuration).getCustomVocabulary(workspaceId,options);return(fetch=isomorphicFetch,basePath=BASE_PATH)=>fetch(basePath+localVarFetchArgs.url,localVarFetchArgs.options).then(response=>{let contentType=response.headers.get("content-type");if(response.status>=200&&response.status<300&&contentType&&-1!==contentType.indexOf("audio/"))return response.blob();if(response.status>=200&&response.status<300&&contentType&&-1!==contentType.indexOf("text/"))return response.text();if(response.status>=200&&response.status<300)return response.json();throw response})},updateCustomVocabulary(workspaceId,body,options){let localVarFetchArgs=(0,exports.CustomVocabularyApiFetchParamCreator)(configuration).updateCustomVocabulary(workspaceId,body,options);return(fetch=isomorphicFetch,basePath=BASE_PATH)=>fetch(basePath+localVarFetchArgs.url,localVarFetchArgs.options).then(response=>{let contentType=response.headers.get("content-type");if(response.status>=200&&response.status<300&&contentType&&-1!==contentType.indexOf("audio/"))return response.blob();if(response.status>=200&&response.status<300&&contentType&&-1!==contentType.indexOf("text/"))return response.text();if(response.status>=200&&response.status<300)return response.json();throw response})}}},exports.CustomVocabularyApiFactory=function(configuration,fetch,basePath){return{getCustomVocabulary:(workspaceId,options)=>(0,exports.CustomVocabularyApiFp)(configuration).getCustomVocabulary(workspaceId,options)(fetch,basePath),updateCustomVocabulary:(workspaceId,body,options)=>(0,exports.CustomVocabularyApiFp)(configuration).updateCustomVocabulary(workspaceId,body,options)(fetch,basePath)}},exports.CustomVocabularyApi=class extends BaseAPI{getCustomVocabulary(workspaceId,options){return(0,exports.CustomVocabularyApiFp)(this.configuration).getCustomVocabulary(workspaceId,options)(this.fetch,this.basePath)}updateCustomVocabulary(workspaceId,body,options){return(0,exports.CustomVocabularyApiFp)(this.configuration).updateCustomVocabulary(workspaceId,body,options)(this.fetch,this.basePath)}},exports.SubtitleStylesApiFetchParamCreator=function(configuration){return{createSubtitleStyle(body,options={}){if(null==body)throw new RequiredError("body","Required parameter body was null or undefined when calling createSubtitleStyle.");let localVarUrlObj=url.parse("/v1/subtitles/styles",!0),localVarRequestOptions=Object.assign({method:"POST"},options),localVarHeaderParameter={};return localVarHeaderParameter["Content-Type"]="application/json",localVarUrlObj.query=Object.assign({},localVarUrlObj.query,{},options.query),localVarUrlObj.search=null,localVarRequestOptions.headers=Object.assign({},localVarHeaderParameter,options.headers),localVarRequestOptions.body=JSON.stringify(body||{}),{url:url.format(localVarUrlObj),options:localVarRequestOptions}},getSubtitleStyleById(styleId,options={}){if(null==styleId)throw new RequiredError("styleId","Required parameter styleId was null or undefined when calling getSubtitleStyleById.");let localVarPath="/v1/subtitles/styles/{styleId}".replace("{styleId}",encodeURIComponent(String(styleId))),localVarUrlObj=url.parse(localVarPath,!0),localVarRequestOptions=Object.assign({method:"GET"},options);return localVarUrlObj.query=Object.assign({},localVarUrlObj.query,{},options.query),localVarUrlObj.search=null,localVarRequestOptions.headers=Object.assign({},{},options.headers),{url:url.format(localVarUrlObj),options:localVarRequestOptions}},listSubtitleStyles(workspaceId,projectId,page,size,options={}){let localVarUrlObj=url.parse("/v1/subtitles/styles",!0),localVarRequestOptions=Object.assign({method:"GET"},options),localVarQueryParameter={};return void 0!==workspaceId&&(localVarQueryParameter.workspaceId=workspaceId),void 0!==projectId&&(localVarQueryParameter.projectId=projectId),void 0!==page&&(localVarQueryParameter.page=page),void 0!==size&&(localVarQueryParameter.size=size),localVarUrlObj.query=Object.assign({},localVarUrlObj.query,localVarQueryParameter,options.query),localVarUrlObj.search=null,localVarRequestOptions.headers=Object.assign({},{},options.headers),{url:url.format(localVarUrlObj),options:localVarRequestOptions}},removeSubtitleStyleById(styleId,options={}){if(null==styleId)throw new RequiredError("styleId","Required parameter styleId was null or undefined when calling removeSubtitleStyleById.");let localVarPath="/v1/subtitles/styles/{styleId}".replace("{styleId}",encodeURIComponent(String(styleId))),localVarUrlObj=url.parse(localVarPath,!0),localVarRequestOptions=Object.assign({method:"DELETE"},options);return localVarUrlObj.query=Object.assign({},localVarUrlObj.query,{},options.query),localVarUrlObj.search=null,localVarRequestOptions.headers=Object.assign({},{},options.headers),{url:url.format(localVarUrlObj),options:localVarRequestOptions}},updateSubtitleStyleById(body,styleId,options={}){if(null==body)throw new RequiredError("body","Required parameter body was null or undefined when calling updateSubtitleStyleById.");if(null==styleId)throw new RequiredError("styleId","Required parameter styleId was null or undefined when calling updateSubtitleStyleById.");let localVarPath="/v1/subtitles/styles/{styleId}".replace("{styleId}",encodeURIComponent(String(styleId))),localVarUrlObj=url.parse(localVarPath,!0),localVarRequestOptions=Object.assign({method:"PATCH"},options),localVarHeaderParameter={};return localVarHeaderParameter["Content-Type"]="application/json",localVarUrlObj.query=Object.assign({},localVarUrlObj.query,{},options.query),localVarUrlObj.search=null,localVarRequestOptions.headers=Object.assign({},localVarHeaderParameter,options.headers),localVarRequestOptions.body=JSON.stringify(body||{}),{url:url.format(localVarUrlObj),options:localVarRequestOptions}}}},exports.SubtitleStylesApiFp=function(configuration){return{createSubtitleStyle(body,options){let localVarFetchArgs=(0,exports.SubtitleStylesApiFetchParamCreator)(configuration).createSubtitleStyle(body,options);return(fetch=isomorphicFetch,basePath=BASE_PATH)=>fetch(basePath+localVarFetchArgs.url,localVarFetchArgs.options).then(response=>{let contentType=response.headers.get("content-type");if(response.status>=200&&response.status<300&&contentType&&-1!==contentType.indexOf("audio/"))return response.blob();if(response.status>=200&&response.status<300&&contentType&&-1!==contentType.indexOf("text/"))return response.text();if(response.status>=200&&response.status<300)return response.json();throw response})},getSubtitleStyleById(styleId,options){let localVarFetchArgs=(0,exports.SubtitleStylesApiFetchParamCreator)(configuration).getSubtitleStyleById(styleId,options);return(fetch=isomorphicFetch,basePath=BASE_PATH)=>fetch(basePath+localVarFetchArgs.url,localVarFetchArgs.options).then(response=>{let contentType=response.headers.get("content-type");if(response.status>=200&&response.status<300&&contentType&&-1!==contentType.indexOf("audio/"))return response.blob();if(response.status>=200&&response.status<300&&contentType&&-1!==contentType.indexOf("text/"))return response.text();if(response.status>=200&&response.status<300)return response.json();throw response})},listSubtitleStyles(workspaceId,projectId,page,size,options){let localVarFetchArgs=(0,exports.SubtitleStylesApiFetchParamCreator)(configuration).listSubtitleStyles(workspaceId,projectId,page,size,options);return(fetch=isomorphicFetch,basePath=BASE_PATH)=>fetch(basePath+localVarFetchArgs.url,localVarFetchArgs.options).then(response=>{let contentType=response.headers.get("content-type");if(response.status>=200&&response.status<300&&contentType&&-1!==contentType.indexOf("audio/"))return response.blob();if(response.status>=200&&response.status<300&&contentType&&-1!==contentType.indexOf("text/"))return response.text();if(response.status>=200&&response.status<300)return response.json();throw response})},removeSubtitleStyleById(styleId,options){let localVarFetchArgs=(0,exports.SubtitleStylesApiFetchParamCreator)(configuration).removeSubtitleStyleById(styleId,options);return(fetch=isomorphicFetch,basePath=BASE_PATH)=>fetch(basePath+localVarFetchArgs.url,localVarFetchArgs.options).then(response=>{let contentType=response.headers.get("content-type");if(response.status>=200&&response.status<300&&contentType&&-1!==contentType.indexOf("audio/"))return response.blob();if(response.status>=200&&response.status<300&&contentType&&-1!==contentType.indexOf("text/"))return response.text();if(response.status>=200&&response.status<300)return response;throw response})},updateSubtitleStyleById(body,styleId,options){let localVarFetchArgs=(0,exports.SubtitleStylesApiFetchParamCreator)(configuration).updateSubtitleStyleById(body,styleId,options);return(fetch=isomorphicFetch,basePath=BASE_PATH)=>fetch(basePath+localVarFetchArgs.url,localVarFetchArgs.options).then(response=>{let contentType=response.headers.get("content-type");if(response.status>=200&&response.status<300&&contentType&&-1!==contentType.indexOf("audio/"))return response.blob();if(response.status>=200&&response.status<300&&contentType&&-1!==contentType.indexOf("text/"))return response.text();if(response.status>=200&&response.status<300)return response.json();throw response})}}},exports.SubtitleStylesApiFactory=function(configuration,fetch,basePath){return{createSubtitleStyle:(body,options)=>(0,exports.SubtitleStylesApiFp)(configuration).createSubtitleStyle(body,options)(fetch,basePath),getSubtitleStyleById:(styleId,options)=>(0,exports.SubtitleStylesApiFp)(configuration).getSubtitleStyleById(styleId,options)(fetch,basePath),listSubtitleStyles:(workspaceId,projectId,page,size,options)=>(0,exports.SubtitleStylesApiFp)(configuration).listSubtitleStyles(workspaceId,projectId,page,size,options)(fetch,basePath),removeSubtitleStyleById:(styleId,options)=>(0,exports.SubtitleStylesApiFp)(configuration).removeSubtitleStyleById(styleId,options)(fetch,basePath),updateSubtitleStyleById:(body,styleId,options)=>(0,exports.SubtitleStylesApiFp)(configuration).updateSubtitleStyleById(body,styleId,options)(fetch,basePath)}},exports.SubtitleStylesApi=class extends BaseAPI{createSubtitleStyle(body,options){return(0,exports.SubtitleStylesApiFp)(this.configuration).createSubtitleStyle(body,options)(this.fetch,this.basePath)}getSubtitleStyleById(styleId,options){return(0,exports.SubtitleStylesApiFp)(this.configuration).getSubtitleStyleById(styleId,options)(this.fetch,this.basePath)}listSubtitleStyles(workspaceId,projectId,page,size,options){return(0,exports.SubtitleStylesApiFp)(this.configuration).listSubtitleStyles(workspaceId,projectId,page,size,options)(this.fetch,this.basePath)}removeSubtitleStyleById(styleId,options){return(0,exports.SubtitleStylesApiFp)(this.configuration).removeSubtitleStyleById(styleId,options)(this.fetch,this.basePath)}updateSubtitleStyleById(body,styleId,options){return(0,exports.SubtitleStylesApiFp)(this.configuration).updateSubtitleStyleById(body,styleId,options)(this.fetch,this.basePath)}},exports.SubtitleTranscriptionsApiFetchParamCreator=function(configuration){return{batchTranscribeSubtitles(body,options={}){if(null==body)throw new RequiredError("body","Required parameter body was null or undefined when calling batchTranscribeSubtitles.");let localVarUrlObj=url.parse("/v1/subtitles/transcribe",!0),localVarRequestOptions=Object.assign({method:"POST"},options),localVarHeaderParameter={};return localVarHeaderParameter["Content-Type"]="application/json",localVarUrlObj.query=Object.assign({},localVarUrlObj.query,{},options.query),localVarUrlObj.search=null,localVarRequestOptions.headers=Object.assign({},localVarHeaderParameter,options.headers),localVarRequestOptions.body=JSON.stringify(body||{}),{url:url.format(localVarUrlObj),options:localVarRequestOptions}},transcribeLanguages(options={}){let localVarUrlObj=url.parse("/v1/subtitles/transcribe/languages",!0),localVarRequestOptions=Object.assign({method:"GET"},options);return localVarUrlObj.query=Object.assign({},localVarUrlObj.query,{},options.query),localVarUrlObj.search=null,localVarRequestOptions.headers=Object.assign({},{},options.headers),{url:url.format(localVarUrlObj),options:localVarRequestOptions}},transcribeSubtitles(body,assetId,options={}){if(null==body)throw new RequiredError("body","Required parameter body was null or undefined when calling transcribeSubtitles.");if(null==assetId)throw new RequiredError("assetId","Required parameter assetId was null or undefined when calling transcribeSubtitles.");let localVarPath="/v1/subtitles/assets/{assetId}/transcribe".replace("{assetId}",encodeURIComponent(String(assetId))),localVarUrlObj=url.parse(localVarPath,!0),localVarRequestOptions=Object.assign({method:"POST"},options),localVarHeaderParameter={};return localVarHeaderParameter["Content-Type"]="application/json",localVarUrlObj.query=Object.assign({},localVarUrlObj.query,{},options.query),localVarUrlObj.search=null,localVarRequestOptions.headers=Object.assign({},localVarHeaderParameter,options.headers),localVarRequestOptions.body=JSON.stringify(body||{}),{url:url.format(localVarUrlObj),options:localVarRequestOptions}}}},exports.SubtitleTranscriptionsApiFp=function(configuration){return{batchTranscribeSubtitles(body,options){let localVarFetchArgs=(0,exports.SubtitleTranscriptionsApiFetchParamCreator)(configuration).batchTranscribeSubtitles(body,options);return(fetch=isomorphicFetch,basePath=BASE_PATH)=>fetch(basePath+localVarFetchArgs.url,localVarFetchArgs.options).then(response=>{let contentType=response.headers.get("content-type");if(response.status>=200&&response.status<300&&contentType&&-1!==contentType.indexOf("audio/"))return response.blob();if(response.status>=200&&response.status<300&&contentType&&-1!==contentType.indexOf("text/"))return response.text();if(response.status>=200&&response.status<300)return response.json();throw response})},transcribeLanguages(options){let localVarFetchArgs=(0,exports.SubtitleTranscriptionsApiFetchParamCreator)(configuration).transcribeLanguages(options);return(fetch=isomorphicFetch,basePath=BASE_PATH)=>fetch(basePath+localVarFetchArgs.url,localVarFetchArgs.options).then(response=>{let contentType=response.headers.get("content-type");if(response.status>=200&&response.status<300&&contentType&&-1!==contentType.indexOf("audio/"))return response.blob();if(response.status>=200&&response.status<300&&contentType&&-1!==contentType.indexOf("text/"))return response.text();if(response.status>=200&&response.status<300)return response.json();throw response})},transcribeSubtitles(body,assetId,options){let localVarFetchArgs=(0,exports.SubtitleTranscriptionsApiFetchParamCreator)(configuration).transcribeSubtitles(body,assetId,options);return(fetch=isomorphicFetch,basePath=BASE_PATH)=>fetch(basePath+localVarFetchArgs.url,localVarFetchArgs.options).then(response=>{let contentType=response.headers.get("content-type");if(response.status>=200&&response.status<300&&contentType&&-1!==contentType.indexOf("audio/"))return response.blob();if(response.status>=200&&response.status<300&&contentType&&-1!==contentType.indexOf("text/"))return response.text();if(response.status>=200&&response.status<300)return response.json();throw response})}}},exports.SubtitleTranscriptionsApiFactory=function(configuration,fetch,basePath){return{batchTranscribeSubtitles:(body,options)=>(0,exports.SubtitleTranscriptionsApiFp)(configuration).batchTranscribeSubtitles(body,options)(fetch,basePath),transcribeLanguages:options=>(0,exports.SubtitleTranscriptionsApiFp)(configuration).transcribeLanguages(options)(fetch,basePath),transcribeSubtitles:(body,assetId,options)=>(0,exports.SubtitleTranscriptionsApiFp)(configuration).transcribeSubtitles(body,assetId,options)(fetch,basePath)}},exports.SubtitleTranscriptionsApi=class extends BaseAPI{batchTranscribeSubtitles(body,options){return(0,exports.SubtitleTranscriptionsApiFp)(this.configuration).batchTranscribeSubtitles(body,options)(this.fetch,this.basePath)}transcribeLanguages(options){return(0,exports.SubtitleTranscriptionsApiFp)(this.configuration).transcribeLanguages(options)(this.fetch,this.basePath)}transcribeSubtitles(body,assetId,options){return(0,exports.SubtitleTranscriptionsApiFp)(this.configuration).transcribeSubtitles(body,assetId,options)(this.fetch,this.basePath)}},exports.SubtitleTranslationsApiFetchParamCreator=function(configuration){return{translateLanguages(options={}){let localVarUrlObj=url.parse("/v1/subtitles/translate/languages",!0),localVarRequestOptions=Object.assign({method:"GET"},options);return localVarUrlObj.query=Object.assign({},localVarUrlObj.query,{},options.query),localVarUrlObj.search=null,localVarRequestOptions.headers=Object.assign({},{},options.headers),{url:url.format(localVarUrlObj),options:localVarRequestOptions}},translateSubtitles(body,subtitleId,options={}){if(null==body)throw new RequiredError("body","Required parameter body was null or undefined when calling translateSubtitles.");if(null==subtitleId)throw new RequiredError("subtitleId","Required parameter subtitleId was null or undefined when calling translateSubtitles.");let localVarPath="/v1/subtitles/{subtitleId}/translate".replace("{subtitleId}",encodeURIComponent(String(subtitleId))),localVarUrlObj=url.parse(localVarPath,!0),localVarRequestOptions=Object.assign({method:"POST"},options),localVarHeaderParameter={};return localVarHeaderParameter["Content-Type"]="application/json",localVarUrlObj.query=Object.assign({},localVarUrlObj.query,{},options.query),localVarUrlObj.search=null,localVarRequestOptions.headers=Object.assign({},localVarHeaderParameter,options.headers),localVarRequestOptions.body=JSON.stringify(body||{}),{url:url.format(localVarUrlObj),options:localVarRequestOptions}}}},exports.SubtitleTranslationsApiFp=function(configuration){return{translateLanguages(options){let localVarFetchArgs=(0,exports.SubtitleTranslationsApiFetchParamCreator)(configuration).translateLanguages(options);return(fetch=isomorphicFetch,basePath=BASE_PATH)=>fetch(basePath+localVarFetchArgs.url,localVarFetchArgs.options).then(response=>{let contentType=response.headers.get("content-type");if(response.status>=200&&response.status<300&&contentType&&-1!==contentType.indexOf("audio/"))return response.blob();if(response.status>=200&&response.status<300&&contentType&&-1!==contentType.indexOf("text/"))return response.text();if(response.status>=200&&response.status<300)return response.json();throw response})},translateSubtitles(body,subtitleId,options){let localVarFetchArgs=(0,exports.SubtitleTranslationsApiFetchParamCreator)(configuration).translateSubtitles(body,subtitleId,options);return(fetch=isomorphicFetch,basePath=BASE_PATH)=>fetch(basePath+localVarFetchArgs.url,localVarFetchArgs.options).then(response=>{let contentType=response.headers.get("content-type");if(response.status>=200&&response.status<300&&contentType&&-1!==contentType.indexOf("audio/"))return response.blob();if(response.status>=200&&response.status<300&&contentType&&-1!==contentType.indexOf("text/"))return response.text();if(response.status>=200&&response.status<300)return response.json();throw response})}}},exports.SubtitleTranslationsApiFactory=function(configuration,fetch,basePath){return{translateLanguages:options=>(0,exports.SubtitleTranslationsApiFp)(configuration).translateLanguages(options)(fetch,basePath),translateSubtitles:(body,subtitleId,options)=>(0,exports.SubtitleTranslationsApiFp)(configuration).translateSubtitles(body,subtitleId,options)(fetch,basePath)}},exports.SubtitleTranslationsApi=class extends BaseAPI{translateLanguages(options){return(0,exports.SubtitleTranslationsApiFp)(this.configuration).translateLanguages(options)(this.fetch,this.basePath)}translateSubtitles(body,subtitleId,options){return(0,exports.SubtitleTranslationsApiFp)(this.configuration).translateSubtitles(body,subtitleId,options)(this.fetch,this.basePath)}},exports.SubtitleWebhooksApiFetchParamCreator=function(configuration){return{subtitleAssemblyAiWebhook(body,subtitleId,subtitleTranscriptionId,options={}){if(null==body)throw new RequiredError("body","Required parameter body was null or undefined when calling subtitleAssemblyAiWebhook.");if(null==subtitleId)throw new RequiredError("subtitleId","Required parameter subtitleId was null or undefined when calling subtitleAssemblyAiWebhook.");if(null==subtitleTranscriptionId)throw new RequiredError("subtitleTranscriptionId","Required parameter subtitleTranscriptionId was null or undefined when calling subtitleAssemblyAiWebhook.");let localVarPath="/v1/subtitles/webhooks/assemblyai/{subtitleId}/{subtitleTranscriptionId}".replace("{subtitleId}",encodeURIComponent(String(subtitleId))).replace("{subtitleTranscriptionId}",encodeURIComponent(String(subtitleTranscriptionId))),localVarUrlObj=url.parse(localVarPath,!0),localVarRequestOptions=Object.assign({method:"POST"},options),localVarHeaderParameter={};return localVarHeaderParameter["Content-Type"]="application/json",localVarUrlObj.query=Object.assign({},localVarUrlObj.query,{},options.query),localVarUrlObj.search=null,localVarRequestOptions.headers=Object.assign({},localVarHeaderParameter,options.headers),localVarRequestOptions.body=JSON.stringify(body||{}),{url:url.format(localVarUrlObj),options:localVarRequestOptions}},subtitleDeepgramWebhook(subtitleId,subtitleTranscriptionId,body,options={}){if(null==subtitleId)throw new RequiredError("subtitleId","Required parameter subtitleId was null or undefined when calling subtitleDeepgramWebhook.");if(null==subtitleTranscriptionId)throw new RequiredError("subtitleTranscriptionId","Required parameter subtitleTranscriptionId was null or undefined when calling subtitleDeepgramWebhook.");let localVarPath="/v1/subtitles/webhooks/deepgram/{subtitleId}/{subtitleTranscriptionId}".replace("{subtitleId}",encodeURIComponent(String(subtitleId))).replace("{subtitleTranscriptionId}",encodeURIComponent(String(subtitleTranscriptionId))),localVarUrlObj=url.parse(localVarPath,!0),localVarRequestOptions=Object.assign({method:"POST"},options),localVarHeaderParameter={};return localVarHeaderParameter["Content-Type"]="application/json",localVarUrlObj.query=Object.assign({},localVarUrlObj.query,{},options.query),localVarUrlObj.search=null,localVarRequestOptions.headers=Object.assign({},localVarHeaderParameter,options.headers),localVarRequestOptions.body=JSON.stringify(body||{}),{url:url.format(localVarUrlObj),options:localVarRequestOptions}},subtitleGladiaWebhook(body,subtitleId,subtitleTranscriptionId,options={}){if(null==body)throw new RequiredError("body","Required parameter body was null or undefined when calling subtitleGladiaWebhook.");if(null==subtitleId)throw new RequiredError("subtitleId","Required parameter subtitleId was null or undefined when calling subtitleGladiaWebhook.");if(null==subtitleTranscriptionId)throw new RequiredError("subtitleTranscriptionId","Required parameter subtitleTranscriptionId was null or undefined when calling subtitleGladiaWebhook.");let localVarPath="/v1/subtitles/webhooks/gladia/{subtitleId}/{subtitleTranscriptionId}".replace("{subtitleId}",encodeURIComponent(String(subtitleId))).replace("{subtitleTranscriptionId}",encodeURIComponent(String(subtitleTranscriptionId))),localVarUrlObj=url.parse(localVarPath,!0),localVarRequestOptions=Object.assign({method:"POST"},options),localVarHeaderParameter={};return localVarHeaderParameter["Content-Type"]="application/json",localVarUrlObj.query=Object.assign({},localVarUrlObj.query,{},options.query),localVarUrlObj.search=null,localVarRequestOptions.headers=Object.assign({},localVarHeaderParameter,options.headers),localVarRequestOptions.body=JSON.stringify(body||{}),{url:url.format(localVarUrlObj),options:localVarRequestOptions}},subtitlePlayhtWebhook(body,options={}){let localVarUrlObj=url.parse("/v1/subtitles/webhooks/playht",!0),localVarRequestOptions=Object.assign({method:"POST"},options),localVarHeaderParameter={};return localVarHeaderParameter["Content-Type"]="application/json",localVarUrlObj.query=Object.assign({},localVarUrlObj.query,{},options.query),localVarUrlObj.search=null,localVarRequestOptions.headers=Object.assign({},localVarHeaderParameter,options.headers),localVarRequestOptions.body=JSON.stringify(body||{}),{url:url.format(localVarUrlObj),options:localVarRequestOptions}}}},exports.SubtitleWebhooksApiFp=function(configuration){return{subtitleAssemblyAiWebhook(body,subtitleId,subtitleTranscriptionId,options){let localVarFetchArgs=(0,exports.SubtitleWebhooksApiFetchParamCreator)(configuration).subtitleAssemblyAiWebhook(body,subtitleId,subtitleTranscriptionId,options);return(fetch=isomorphicFetch,basePath=BASE_PATH)=>fetch(basePath+localVarFetchArgs.url,localVarFetchArgs.options).then(response=>{let contentType=response.headers.get("content-type");if(response.status>=200&&response.status<300&&contentType&&-1!==contentType.indexOf("audio/"))return response.blob();if(response.status>=200&&response.status<300&&contentType&&-1!==contentType.indexOf("text/"))return response.text();if(response.status>=200&&response.status<300)return response.json();throw response})},subtitleDeepgramWebhook(subtitleId,subtitleTranscriptionId,body,options){let localVarFetchArgs=(0,exports.SubtitleWebhooksApiFetchParamCreator)(configuration).subtitleDeepgramWebhook(subtitleId,subtitleTranscriptionId,body,options);return(fetch=isomorphicFetch,basePath=BASE_PATH)=>fetch(basePath+localVarFetchArgs.url,localVarFetchArgs.options).then(response=>{let contentType=response.headers.get("content-type");if(response.status>=200&&response.status<300&&contentType&&-1!==contentType.indexOf("audio/"))return response.blob();if(response.status>=200&&response.status<300&&contentType&&-1!==contentType.indexOf("text/"))return response.text();if(response.status>=200&&response.status<300)return response.json();throw response})},subtitleGladiaWebhook(body,subtitleId,subtitleTranscriptionId,options){let localVarFetchArgs=(0,exports.SubtitleWebhooksApiFetchParamCreator)(configuration).subtitleGladiaWebhook(body,subtitleId,subtitleTranscriptionId,options);return(fetch=isomorphicFetch,basePath=BASE_PATH)=>fetch(basePath+localVarFetchArgs.url,localVarFetchArgs.options).then(response=>{let contentType=response.headers.get("content-type");if(response.status>=200&&response.status<300&&contentType&&-1!==contentType.indexOf("audio/"))return response.blob();if(response.status>=200&&response.status<300&&contentType&&-1!==contentType.indexOf("text/"))return response.text();if(response.status>=200&&response.status<300)return response.json();throw response})},subtitlePlayhtWebhook(body,options){let localVarFetchArgs=(0,exports.SubtitleWebhooksApiFetchParamCreator)(configuration).subtitlePlayhtWebhook(body,options);return(fetch=isomorphicFetch,basePath=BASE_PATH)=>fetch(basePath+localVarFetchArgs.url,localVarFetchArgs.options).then(response=>{let contentType=response.headers.get("content-type");if(response.status>=200&&response.status<300&&contentType&&-1!==contentType.indexOf("audio/"))return response.blob();if(response.status>=200&&response.status<300&&contentType&&-1!==contentType.indexOf("text/"))return response.text();if(response.status>=200&&response.status<300)return response.json();throw response})}}},exports.SubtitleWebhooksApiFactory=function(configuration,fetch,basePath){return{subtitleAssemblyAiWebhook:(body,subtitleId,subtitleTranscriptionId,options)=>(0,exports.SubtitleWebhooksApiFp)(configuration).subtitleAssemblyAiWebhook(body,subtitleId,subtitleTranscriptionId,options)(fetch,basePath),subtitleDeepgramWebhook:(subtitleId,subtitleTranscriptionId,body,options)=>(0,exports.SubtitleWebhooksApiFp)(configuration).subtitleDeepgramWebhook(subtitleId,subtitleTranscriptionId,body,options)(fetch,basePath),subtitleGladiaWebhook:(body,subtitleId,subtitleTranscriptionId,options)=>(0,exports.SubtitleWebhooksApiFp)(configuration).subtitleGladiaWebhook(body,subtitleId,subtitleTranscriptionId,options)(fetch,basePath),subtitlePlayhtWebhook:(body,options)=>(0,exports.SubtitleWebhooksApiFp)(configuration).subtitlePlayhtWebhook(body,options)(fetch,basePath)}},exports.SubtitleWebhooksApi=class extends BaseAPI{subtitleAssemblyAiWebhook(body,subtitleId,subtitleTranscriptionId,options){return(0,exports.SubtitleWebhooksApiFp)(this.configuration).subtitleAssemblyAiWebhook(body,subtitleId,subtitleTranscriptionId,options)(this.fetch,this.basePath)}subtitleDeepgramWebhook(subtitleId,subtitleTranscriptionId,body,options){return(0,exports.SubtitleWebhooksApiFp)(this.configuration).subtitleDeepgramWebhook(subtitleId,subtitleTranscriptionId,body,options)(this.fetch,this.basePath)}subtitleGladiaWebhook(body,subtitleId,subtitleTranscriptionId,options){return(0,exports.SubtitleWebhooksApiFp)(this.configuration).subtitleGladiaWebhook(body,subtitleId,subtitleTranscriptionId,options)(this.fetch,this.basePath)}subtitlePlayhtWebhook(body,options){return(0,exports.SubtitleWebhooksApiFp)(this.configuration).subtitlePlayhtWebhook(body,options)(this.fetch,this.basePath)}},exports.SubtitlesApiFetchParamCreator=function(configuration){return{autoEmojiSubtitleByIds(body,options={}){if(null==body)throw new RequiredError("body","Required parameter body was null or undefined when calling autoEmojiSubtitleByIds.");let localVarUrlObj=url.parse("/v1/subtitles/auto-emoji",!0),localVarRequestOptions=Object.assign({method:"POST"},options),localVarHeaderParameter={};return localVarHeaderParameter["Content-Type"]="application/json",localVarUrlObj.query=Object.assign({},localVarUrlObj.query,{},options.query),localVarUrlObj.search=null,localVarRequestOptions.headers=Object.assign({},localVarHeaderParameter,options.headers),localVarRequestOptions.body=JSON.stringify(body||{}),{url:url.format(localVarUrlObj),options:localVarRequestOptions}},autoHighlightSubtitleByIds(body,options={}){if(null==body)throw new RequiredError("body","Required parameter body was null or undefined when calling autoHighlightSubtitleByIds.");let localVarUrlObj=url.parse("/v1/subtitles/auto-highlight",!0),localVarRequestOptions=Object.assign({method:"POST"},options),localVarHeaderParameter={};return localVarHeaderParameter["Content-Type"]="application/json",localVarUrlObj.query=Object.assign({},localVarUrlObj.query,{},options.query),localVarUrlObj.search=null,localVarRequestOptions.headers=Object.assign({},localVarHeaderParameter,options.headers),localVarRequestOptions.body=JSON.stringify(body||{}),{url:url.format(localVarUrlObj),options:localVarRequestOptions}},createSubtitles(body,options={}){if(null==body)throw new RequiredError("body","Required parameter body was null or undefined when calling createSubtitles.");let localVarUrlObj=url.parse("/v1/subtitles",!0),localVarRequestOptions=Object.assign({method:"POST"},options),localVarHeaderParameter={};return localVarHeaderParameter["Content-Type"]="application/json",localVarUrlObj.query=Object.assign({},localVarUrlObj.query,{},options.query),localVarUrlObj.search=null,localVarRequestOptions.headers=Object.assign({},localVarHeaderParameter,options.headers),localVarRequestOptions.body=JSON.stringify(body||{}),{url:url.format(localVarUrlObj),options:localVarRequestOptions}},duplicateSubtitles(body,size,page,options={}){if(null==body)throw new RequiredError("body","Required parameter body was null or undefined when calling duplicateSubtitles.");let localVarUrlObj=url.parse("/v1/subtitles/duplicate",!0),localVarRequestOptions=Object.assign({method:"POST"},options),localVarHeaderParameter={},localVarQueryParameter={};return void 0!==size&&(localVarQueryParameter.size=size),void 0!==page&&(localVarQueryParameter.page=page),localVarHeaderParameter["Content-Type"]="application/json",localVarUrlObj.query=Object.assign({},localVarUrlObj.query,localVarQueryParameter,options.query),localVarUrlObj.search=null,localVarRequestOptions.headers=Object.assign({},localVarHeaderParameter,options.headers),localVarRequestOptions.body=JSON.stringify(body||{}),{url:url.format(localVarUrlObj),options:localVarRequestOptions}},getSubtitlesById(subtitleId,fields,options={}){if(null==subtitleId)throw new RequiredError("subtitleId","Required parameter subtitleId was null or undefined when calling getSubtitlesById.");let localVarPath="/v1/subtitles/{subtitleId}".replace("{subtitleId}",encodeURIComponent(String(subtitleId))),localVarUrlObj=url.parse(localVarPath,!0),localVarRequestOptions=Object.assign({method:"GET"},options),localVarQueryParameter={};return void 0!==fields&&(localVarQueryParameter.fields=fields),localVarUrlObj.query=Object.assign({},localVarUrlObj.query,localVarQueryParameter,options.query),localVarUrlObj.search=null,localVarRequestOptions.headers=Object.assign({},{},options.headers),{url:url.format(localVarUrlObj),options:localVarRequestOptions}},listSubtitles(assetId,projectId,language,fields,source,size,page,options={}){let localVarUrlObj=url.parse("/v1/subtitles",!0),localVarRequestOptions=Object.assign({method:"GET"},options),localVarQueryParameter={};return void 0!==assetId&&(localVarQueryParameter.assetId=assetId),void 0!==projectId&&(localVarQueryParameter.projectId=projectId),void 0!==language&&(localVarQueryParameter.language=language),void 0!==fields&&(localVarQueryParameter.fields=fields),void 0!==source&&(localVarQueryParameter.source=source),void 0!==size&&(localVarQueryParameter.size=size),void 0!==page&&(localVarQueryParameter.page=page),localVarUrlObj.query=Object.assign({},localVarUrlObj.query,localVarQueryParameter,options.query),localVarUrlObj.search=null,localVarRequestOptions.headers=Object.assign({},{},options.headers),{url:url.format(localVarUrlObj),options:localVarRequestOptions}},putSubtitles(body,size,page,options={}){if(null==body)throw new RequiredError("body","Required parameter body was null or undefined when calling putSubtitles.");let localVarUrlObj=url.parse("/v1/subtitles",!0),localVarRequestOptions=Object.assign({method:"PUT"},options),localVarHeaderParameter={},localVarQueryParameter={};return void 0!==size&&(localVarQueryParameter.size=size),void 0!==page&&(localVarQueryParameter.page=page),localVarHeaderParameter["Content-Type"]="application/json",localVarUrlObj.query=Object.assign({},localVarUrlObj.query,localVarQueryParameter,options.query),localVarUrlObj.search=null,localVarRequestOptions.headers=Object.assign({},localVarHeaderParameter,options.headers),localVarRequestOptions.body=JSON.stringify(body||{}),{url:url.format(localVarUrlObj),options:localVarRequestOptions}},putSubtitlesById(body,subtitleId,options={}){if(null==body)throw new RequiredError("body","Required parameter body was null or undefined when calling putSubtitlesById.");if(null==subtitleId)throw new RequiredError("subtitleId","Required parameter subtitleId was null or undefined when calling putSubtitlesById.");let localVarPath="/v1/subtitles/{subtitleId}".replace("{subtitleId}",encodeURIComponent(String(subtitleId))),localVarUrlObj=url.parse(localVarPath,!0),localVarRequestOptions=Object.assign({method:"PUT"},options),localVarHeaderParameter={};return localVarHeaderParameter["Content-Type"]="application/json",localVarUrlObj.query=Object.assign({},localVarUrlObj.query,{},options.query),localVarUrlObj.search=null,localVarRequestOptions.headers=Object.assign({},localVarHeaderParameter,options.headers),localVarRequestOptions.body=JSON.stringify(body||{}),{url:url.format(localVarUrlObj),options:localVarRequestOptions}},removeSubtitlesById(subtitleId,options={}){if(null==subtitleId)throw new RequiredError("subtitleId","Required parameter subtitleId was null or undefined when calling removeSubtitlesById.");let localVarPath="/v1/subtitles/{subtitleId}".replace("{subtitleId}",encodeURIComponent(String(subtitleId))),localVarUrlObj=url.parse(localVarPath,!0),localVarRequestOptions=Object.assign({method:"DELETE"},options);return localVarUrlObj.query=Object.assign({},localVarUrlObj.query,{},options.query),localVarUrlObj.search=null,localVarRequestOptions.headers=Object.assign({},{},options.headers),{url:url.format(localVarUrlObj),options:localVarRequestOptions}},supportedLanguages(options={}){let localVarUrlObj=url.parse("/v1/subtitles/languages",!0),localVarRequestOptions=Object.assign({method:"GET"},options);return localVarUrlObj.query=Object.assign({},localVarUrlObj.query,{},options.query),localVarUrlObj.search=null,localVarRequestOptions.headers=Object.assign({},{},options.headers),{url:url.format(localVarUrlObj),options:localVarRequestOptions}},updateSubtitlesById(subtitleId,body,options={}){if(null==subtitleId)throw new RequiredError("subtitleId","Required parameter subtitleId was null or undefined when calling updateSubtitlesById.");let localVarPath="/v1/subtitles/{subtitleId}".replace("{subtitleId}",encodeURIComponent(String(subtitleId))),localVarUrlObj=url.parse(localVarPath,!0),localVarRequestOptions=Object.assign({method:"PATCH"},options),localVarHeaderParameter={};return localVarHeaderParameter["Content-Type"]="application/json",localVarUrlObj.query=Object.assign({},localVarUrlObj.query,{},options.query),localVarUrlObj.search=null,localVarRequestOptions.headers=Object.assign({},localVarHeaderParameter,options.headers),localVarRequestOptions.body=JSON.stringify(body||{}),{url:url.format(localVarUrlObj),options:localVarRequestOptions}}}},exports.SubtitlesApiFp=function(configuration){return{autoEmojiSubtitleByIds(body,options){let localVarFetchArgs=(0,exports.SubtitlesApiFetchParamCreator)(configuration).autoEmojiSubtitleByIds(body,options);return(fetch=isomorphicFetch,basePath=BASE_PATH)=>fetch(basePath+localVarFetchArgs.url,localVarFetchArgs.options).then(response=>{let contentType=response.headers.get("content-type");if(response.status>=200&&response.status<300&&contentType&&-1!==contentType.indexOf("audio/"))return response.blob();if(response.status>=200&&response.status<300&&contentType&&-1!==contentType.indexOf("text/"))return response.text();if(response.status>=200&&response.status<300)return response.json();throw response})},autoHighlightSubtitleByIds(body,options){let localVarFetchArgs=(0,exports.SubtitlesApiFetchParamCreator)(configuration).autoHighlightSubtitleByIds(body,options);return(fetch=isomorphicFetch,basePath=BASE_PATH)=>fetch(basePath+localVarFetchArgs.url,localVarFetchArgs.options).then(response=>{let contentType=response.headers.get("content-type");if(response.status>=200&&response.status<300&&contentType&&-1!==contentType.indexOf("audio/"))return response.blob();if(response.status>=200&&response.status<300&&contentType&&-1!==contentType.indexOf("text/"))return response.text();if(response.status>=200&&response.status<300)return response.json();throw response})},createSubtitles(body,options){let localVarFetchArgs=(0,exports.SubtitlesApiFetchParamCreator)(configuration).createSubtitles(body,options);return(fetch=isomorphicFetch,basePath=BASE_PATH)=>fetch(basePath+localVarFetchArgs.url,localVarFetchArgs.options).then(response=>{let contentType=response.headers.get("content-type");if(response.status>=200&&response.status<300&&contentType&&-1!==contentType.indexOf("audio/"))return response.blob();if(response.status>=200&&response.status<300&&contentType&&-1!==contentType.indexOf("text/"))return response.text();if(response.status>=200&&response.status<300)return response.json();throw response})},duplicateSubtitles(body,size,page,options){let localVarFetchArgs=(0,exports.SubtitlesApiFetchParamCreator)(configuration).duplicateSubtitles(body,size,page,options);return(fetch=isomorphicFetch,basePath=BASE_PATH)=>fetch(basePath+localVarFetchArgs.url,localVarFetchArgs.options).then(response=>{let contentType=response.headers.get("content-type");if(response.status>=200&&response.status<300&&contentType&&-1!==contentType.indexOf("audio/"))return response.blob();if(response.status>=200&&response.status<300&&contentType&&-1!==contentType.indexOf("text/"))return response.text();if(response.status>=200&&response.status<300)return response.json();throw response})},getSubtitlesById(subtitleId,fields,options){let localVarFetchArgs=(0,exports.SubtitlesApiFetchParamCreator)(configuration).getSubtitlesById(subtitleId,fields,options);return(fetch=isomorphicFetch,basePath=BASE_PATH)=>fetch(basePath+localVarFetchArgs.url,localVarFetchArgs.options).then(response=>{let contentType=response.headers.get("content-type");if(response.status>=200&&response.status<300&&contentType&&-1!==contentType.indexOf("audio/"))return response.blob();if(response.status>=200&&response.status<300&&contentType&&-1!==contentType.indexOf("text/"))return response.text();if(response.status>=200&&response.status<300)return response.json();throw response})},listSubtitles(assetId,projectId,language,fields,source,size,page,options){let localVarFetchArgs=(0,exports.SubtitlesApiFetchParamCreator)(configuration).listSubtitles(assetId,projectId,language,fields,source,size,page,options);return(fetch=isomorphicFetch,basePath=BASE_PATH)=>fetch(basePath+localVarFetchArgs.url,localVarFetchArgs.options).then(response=>{let contentType=response.headers.get("content-type");if(response.status>=200&&response.status<300&&contentType&&-1!==contentType.indexOf("audio/"))return response.blob();if(response.status>=200&&response.status<300&&contentType&&-1!==contentType.indexOf("text/"))return response.text();if(response.status>=200&&response.status<300)return response.json();throw response})},putSubtitles(body,size,page,options){let localVarFetchArgs=(0,exports.SubtitlesApiFetchParamCreator)(configuration).putSubtitles(body,size,page,options);return(fetch=isomorphicFetch,basePath=BASE_PATH)=>fetch(basePath+localVarFetchArgs.url,localVarFetchArgs.options).then(response=>{let contentType=response.headers.get("content-type");if(response.status>=200&&response.status<300&&contentType&&-1!==contentType.indexOf("audio/"))return response.blob();if(response.status>=200&&response.status<300&&contentType&&-1!==contentType.indexOf("text/"))return response.text();if(response.status>=200&&response.status<300)return response.json();throw response})},putSubtitlesById(body,subtitleId,options){let localVarFetchArgs=(0,exports.SubtitlesApiFetchParamCreator)(configuration).putSubtitlesById(body,subtitleId,options);return(fetch=isomorphicFetch,basePath=BASE_PATH)=>fetch(basePath+localVarFetchArgs.url,localVarFetchArgs.options).then(response=>{let contentType=response.headers.get("content-type");if(response.status>=200&&response.status<300&&contentType&&-1!==contentType.indexOf("audio/"))return response.blob();if(response.status>=200&&response.status<300&&contentType&&-1!==contentType.indexOf("text/"))return response.text();if(response.status>=200&&response.status<300)return response.json();throw response})},removeSubtitlesById(subtitleId,options){let localVarFetchArgs=(0,exports.SubtitlesApiFetchParamCreator)(configuration).removeSubtitlesById(subtitleId,options);return(fetch=isomorphicFetch,basePath=BASE_PATH)=>fetch(basePath+localVarFetchArgs.url,localVarFetchArgs.options).then(response=>{let contentType=response.headers.get("content-type");if(response.status>=200&&response.status<300&&contentType&&-1!==contentType.indexOf("audio/"))return response.blob();if(response.status>=200&&response.status<300&&contentType&&-1!==contentType.indexOf("text/"))return response.text();if(response.status>=200&&response.status<300)return response;throw response})},supportedLanguages(options){let localVarFetchArgs=(0,exports.SubtitlesApiFetchParamCreator)(configuration).supportedLanguages(options);return(fetch=isomorphicFetch,basePath=BASE_PATH)=>fetch(basePath+localVarFetchArgs.url,localVarFetchArgs.options).then(response=>{let contentType=response.headers.get("content-type");if(response.status>=200&&response.status<300&&contentType&&-1!==contentType.indexOf("audio/"))return response.blob();if(response.status>=200&&response.status<300&&contentType&&-1!==contentType.indexOf("text/"))return response.text();if(response.status>=200&&response.status<300)return response.json();throw response})},updateSubtitlesById(subtitleId,body,options){let localVarFetchArgs=(0,exports.SubtitlesApiFetchParamCreator)(configuration).updateSubtitlesById(subtitleId,body,options);return(fetch=isomorphicFetch,basePath=BASE_PATH)=>fetch(basePath+localVarFetchArgs.url,localVarFetchArgs.options).then(response=>{let contentType=response.headers.get("content-type");if(response.status>=200&&response.status<300&&contentType&&-1!==contentType.indexOf("audio/"))return response.blob();if(response.status>=200&&response.status<300&&contentType&&-1!==contentType.indexOf("text/"))return response.text();if(response.status>=200&&response.status<300)return response.json();throw response})}}},exports.SubtitlesApiFactory=function(configuration,fetch,basePath){return{autoEmojiSubtitleByIds:(body,options)=>(0,exports.SubtitlesApiFp)(configuration).autoEmojiSubtitleByIds(body,options)(fetch,basePath),autoHighlightSubtitleByIds:(body,options)=>(0,exports.SubtitlesApiFp)(configuration).autoHighlightSubtitleByIds(body,options)(fetch,basePath),createSubtitles:(body,options)=>(0,exports.SubtitlesApiFp)(configuration).createSubtitles(body,options)(fetch,basePath),duplicateSubtitles:(body,size,page,options)=>(0,exports.SubtitlesApiFp)(configuration).duplicateSubtitles(body,size,page,options)(fetch,basePath),getSubtitlesById:(subtitleId,fields,options)=>(0,exports.SubtitlesApiFp)(configuration).getSubtitlesById(subtitleId,fields,options)(fetch,basePath),listSubtitles:(assetId,projectId,language,fields,source,size,page,options)=>(0,exports.SubtitlesApiFp)(configuration).listSubtitles(assetId,projectId,language,fields,source,size,page,options)(fetch,basePath),putSubtitles:(body,size,page,options)=>(0,exports.SubtitlesApiFp)(configuration).putSubtitles(body,size,page,options)(fetch,basePath),putSubtitlesById:(body,subtitleId,options)=>(0,exports.SubtitlesApiFp)(configuration).putSubtitlesById(body,subtitleId,options)(fetch,basePath),removeSubtitlesById:(subtitleId,options)=>(0,exports.SubtitlesApiFp)(configuration).removeSubtitlesById(subtitleId,options)(fetch,basePath),supportedLanguages:options=>(0,exports.SubtitlesApiFp)(configuration).supportedLanguages(options)(fetch,basePath),updateSubtitlesById:(subtitleId,body,options)=>(0,exports.SubtitlesApiFp)(configuration).updateSubtitlesById(subtitleId,body,options)(fetch,basePath)}},exports.SubtitlesApi=class extends BaseAPI{autoEmojiSubtitleByIds(body,options){return(0,exports.SubtitlesApiFp)(this.configuration).autoEmojiSubtitleByIds(body,options)(this.fetch,this.basePath)}autoHighlightSubtitleByIds(body,options){return(0,exports.SubtitlesApiFp)(this.configuration).autoHighlightSubtitleByIds(body,options)(this.fetch,this.basePath)}createSubtitles(body,options){return(0,exports.SubtitlesApiFp)(this.configuration).createSubtitles(body,options)(this.fetch,this.basePath)}duplicateSubtitles(body,size,page,options){return(0,exports.SubtitlesApiFp)(this.configuration).duplicateSubtitles(body,size,page,options)(this.fetch,this.basePath)}getSubtitlesById(subtitleId,fields,options){return(0,exports.SubtitlesApiFp)(this.configuration).getSubtitlesById(subtitleId,fields,options)(this.fetch,this.basePath)}listSubtitles(assetId,projectId,language,fields,source,size,page,options){return(0,exports.SubtitlesApiFp)(this.configuration).listSubtitles(assetId,projectId,language,fields,source,size,page,options)(this.fetch,this.basePath)}putSubtitles(body,size,page,options){return(0,exports.SubtitlesApiFp)(this.configuration).putSubtitles(body,size,page,options)(this.fetch,this.basePath)}putSubtitlesById(body,subtitleId,options){return(0,exports.SubtitlesApiFp)(this.configuration).putSubtitlesById(body,subtitleId,options)(this.fetch,this.basePath)}removeSubtitlesById(subtitleId,options){return(0,exports.SubtitlesApiFp)(this.configuration).removeSubtitlesById(subtitleId,options)(this.fetch,this.basePath)}supportedLanguages(options){return(0,exports.SubtitlesApiFp)(this.configuration).supportedLanguages(options)(this.fetch,this.basePath)}updateSubtitlesById(subtitleId,body,options){return(0,exports.SubtitlesApiFp)(this.configuration).updateSubtitlesById(subtitleId,body,options)(this.fetch,this.basePath)}},exports.SynthesizeSpeechApiFetchParamCreator=function(configuration){return{generate(body,options={}){if(null==body)throw new RequiredError("body","Required parameter body was null or undefined when calling generate.");let localVarUrlObj=url.parse("/v1/subtitles/synthesize/generate",!0),localVarRequestOptions=Object.assign({method:"POST"},options),localVarHeaderParameter={};return localVarHeaderParameter["Content-Type"]="application/json",localVarUrlObj.query=Object.assign({},localVarUrlObj.query,{},options.query),localVarUrlObj.search=null,localVarRequestOptions.headers=Object.assign({},localVarHeaderParameter,options.headers),localVarRequestOptions.body=JSON.stringify(body||{}),{url:url.format(localVarUrlObj),options:localVarRequestOptions}},listVoices(options={}){let localVarUrlObj=url.parse("/v1/subtitles/synthesize/listVoices",!0),localVarRequestOptions=Object.assign({method:"GET"},options);return localVarUrlObj.query=Object.assign({},localVarUrlObj.query,{},options.query),localVarUrlObj.search=null,localVarRequestOptions.headers=Object.assign({},{},options.headers),{url:url.format(localVarUrlObj),options:localVarRequestOptions}},preview(voice,text,style,rate,locale,workspaceId,projectId,options={}){if(null==voice)throw new RequiredError("voice","Required parameter voice was null or undefined when calling preview.");let localVarUrlObj=url.parse("/v1/subtitles/synthesize/preview",!0),localVarRequestOptions=Object.assign({method:"GET"},options),localVarQueryParameter={};return void 0!==text&&(localVarQueryParameter.text=text),void 0!==voice&&(localVarQueryParameter.voice=voice),void 0!==style&&(localVarQueryParameter.style=style),void 0!==rate&&(localVarQueryParameter.rate=rate),void 0!==locale&&(localVarQueryParameter.locale=locale),void 0!==workspaceId&&(localVarQueryParameter.workspaceId=workspaceId),void 0!==projectId&&(localVarQueryParameter.projectId=projectId),localVarUrlObj.query=Object.assign({},localVarUrlObj.query,localVarQueryParameter,options.query),localVarUrlObj.search=null,localVarRequestOptions.headers=Object.assign({},{},options.headers),{url:url.format(localVarUrlObj),options:localVarRequestOptions}},synthesize(body,options={}){if(null==body)throw new RequiredError("body","Required parameter body was null or undefined when calling synthesize.");let localVarUrlObj=url.parse("/v1/subtitles/synthesize",!0),localVarRequestOptions=Object.assign({method:"POST"},options),localVarHeaderParameter={};return localVarHeaderParameter["Content-Type"]="application/json",localVarUrlObj.query=Object.assign({},localVarUrlObj.query,{},options.query),localVarUrlObj.search=null,localVarRequestOptions.headers=Object.assign({},localVarHeaderParameter,options.headers),localVarRequestOptions.body=JSON.stringify(body||{}),{url:url.format(localVarUrlObj),options:localVarRequestOptions}}}},exports.SynthesizeSpeechApiFp=function(configuration){return{generate(body,options){let localVarFetchArgs=(0,exports.SynthesizeSpeechApiFetchParamCreator)(configuration).generate(body,options);return(fetch=isomorphicFetch,basePath=BASE_PATH)=>fetch(basePath+localVarFetchArgs.url,localVarFetchArgs.options).then(response=>{let contentType=response.headers.get("content-type");if(response.status>=200&&response.status<300&&contentType&&-1!==contentType.indexOf("audio/"))return response.blob();if(response.status>=200&&response.status<300&&contentType&&-1!==contentType.indexOf("text/"))return response.text();if(response.status>=200&&response.status<300)return response.json();throw response})},listVoices(options){let localVarFetchArgs=(0,exports.SynthesizeSpeechApiFetchParamCreator)(configuration).listVoices(options);return(fetch=isomorphicFetch,basePath=BASE_PATH)=>fetch(basePath+localVarFetchArgs.url,localVarFetchArgs.options).then(response=>{let contentType=response.headers.get("content-type");if(response.status>=200&&response.status<300&&contentType&&-1!==contentType.indexOf("audio/"))return response.blob();if(response.status>=200&&response.status<300&&contentType&&-1!==contentType.indexOf("text/"))return response.text();if(response.status>=200&&response.status<300)return response.json();throw response})},preview(voice,text,style,rate,locale,workspaceId,projectId,options){let localVarFetchArgs=(0,exports.SynthesizeSpeechApiFetchParamCreator)(configuration).preview(voice,text,style,rate,locale,workspaceId,projectId,options);return(fetch=isomorphicFetch,basePath=BASE_PATH)=>fetch(basePath+localVarFetchArgs.url,localVarFetchArgs.options).then(response=>{let contentType=response.headers.get("content-type");if(response.status>=200&&response.status<300&&contentType&&-1!==contentType.indexOf("audio/"))return response.blob();if(response.status>=200&&response.status<300&&contentType&&-1!==contentType.indexOf("text/"))return response.text();if(response.status>=200&&response.status<300)return response.json();throw response})},synthesize(body,options){let localVarFetchArgs=(0,exports.SynthesizeSpeechApiFetchParamCreator)(configuration).synthesize(body,options);return(fetch=isomorphicFetch,basePath=BASE_PATH)=>fetch(basePath+localVarFetchArgs.url,localVarFetchArgs.options).then(response=>{let contentType=response.headers.get("content-type");if(response.status>=200&&response.status<300&&contentType&&-1!==contentType.indexOf("audio/"))return response.blob();if(response.status>=200&&response.status<300&&contentType&&-1!==contentType.indexOf("text/"))return response.text();if(response.status>=200&&response.status<300)return response.json();throw response})}}},exports.SynthesizeSpeechApiFactory=function(configuration,fetch,basePath){return{generate:(body,options)=>(0,exports.SynthesizeSpeechApiFp)(configuration).generate(body,options)(fetch,basePath),listVoices:options=>(0,exports.SynthesizeSpeechApiFp)(configuration).listVoices(options)(fetch,basePath),preview:(voice,text,style,rate,locale,workspaceId,projectId,options)=>(0,exports.SynthesizeSpeechApiFp)(configuration).preview(voice,text,style,rate,locale,workspaceId,projectId,options)(fetch,basePath),synthesize:(body,options)=>(0,exports.SynthesizeSpeechApiFp)(configuration).synthesize(body,options)(fetch,basePath)}},exports.SynthesizeSpeechApi=class extends BaseAPI{generate(body,options){return(0,exports.SynthesizeSpeechApiFp)(this.configuration).generate(body,options)(this.fetch,this.basePath)}listVoices(options){return(0,exports.SynthesizeSpeechApiFp)(this.configuration).listVoices(options)(this.fetch,this.basePath)}preview(voice,text,style,rate,locale,workspaceId,projectId,options){return(0,exports.SynthesizeSpeechApiFp)(this.configuration).preview(voice,text,style,rate,locale,workspaceId,projectId,options)(this.fetch,this.basePath)}synthesize(body,options){return(0,exports.SynthesizeSpeechApiFp)(this.configuration).synthesize(body,options)(this.fetch,this.basePath)}},exports.VoiceCloneApiFetchParamCreator=function(configuration){return{createVoiceClone(body,options={}){if(null==body)throw new RequiredError("body","Required parameter body was null or undefined when calling createVoiceClone.");let localVarUrlObj=url.parse("/v1/voice-clones",!0),localVarRequestOptions=Object.assign({method:"POST"},options),localVarHeaderParameter={};return localVarHeaderParameter["Content-Type"]="application/json",localVarUrlObj.query=Object.assign({},localVarUrlObj.query,{},options.query),localVarUrlObj.search=null,localVarRequestOptions.headers=Object.assign({},localVarHeaderParameter,options.headers),localVarRequestOptions.body=JSON.stringify(body||{}),{url:url.format(localVarUrlObj),options:localVarRequestOptions}},listVoiceClones(workspaceId,page,size,options={}){let localVarUrlObj=url.parse("/v1/voice-clones",!0),localVarRequestOptions=Object.assign({method:"GET"},options),localVarQueryParameter={};return void 0!==workspaceId&&(localVarQueryParameter.workspaceId=workspaceId),void 0!==page&&(localVarQueryParameter.page=page),void 0!==size&&(localVarQueryParameter.size=size),localVarUrlObj.query=Object.assign({},localVarUrlObj.query,localVarQueryParameter,options.query),localVarUrlObj.search=null,localVarRequestOptions.headers=Object.assign({},{},options.headers),{url:url.format(localVarUrlObj),options:localVarRequestOptions}},removeVoiceCloneByID(voiceCloneId,options={}){if(null==voiceCloneId)throw new RequiredError("voiceCloneId","Required parameter voiceCloneId was null or undefined when calling removeVoiceCloneByID.");let localVarPath="/v1/voice-clones/{voiceCloneId}".replace("{voiceCloneId}",encodeURIComponent(String(voiceCloneId))),localVarUrlObj=url.parse(localVarPath,!0),localVarRequestOptions=Object.assign({method:"DELETE"},options);return localVarUrlObj.query=Object.assign({},localVarUrlObj.query,{},options.query),localVarUrlObj.search=null,localVarRequestOptions.headers=Object.assign({},{},options.headers),{url:url.format(localVarUrlObj),options:localVarRequestOptions}},updateVoiceCloneByID(voiceCloneId,body,options={}){if(null==voiceCloneId)throw new RequiredError("voiceCloneId","Required parameter voiceCloneId was null or undefined when calling updateVoiceCloneByID.");let localVarPath="/v1/voice-clones/{voiceCloneId}".replace("{voiceCloneId}",encodeURIComponent(String(voiceCloneId))),localVarUrlObj=url.parse(localVarPath,!0),localVarRequestOptions=Object.assign({method:"PATCH"},options),localVarHeaderParameter={};return localVarHeaderParameter["Content-Type"]="application/json",localVarUrlObj.query=Object.assign({},localVarUrlObj.query,{},options.query),localVarUrlObj.search=null,localVarRequestOptions.headers=Object.assign({},localVarHeaderParameter,options.headers),localVarRequestOptions.body=JSON.stringify(body||{}),{url:url.format(localVarUrlObj),options:localVarRequestOptions}}}},exports.VoiceCloneApiFp=function(configuration){return{createVoiceClone(body,options){let localVarFetchArgs=(0,exports.VoiceCloneApiFetchParamCreator)(configuration).createVoiceClone(body,options);return(fetch=isomorphicFetch,basePath=BASE_PATH)=>fetch(basePath+localVarFetchArgs.url,localVarFetchArgs.options).then(response=>{let contentType=response.headers.get("content-type");if(response.status>=200&&response.status<300&&contentType&&-1!==contentType.indexOf("audio/"))return response.blob();if(response.status>=200&&response.status<300&&contentType&&-1!==contentType.indexOf("text/"))return response.text();if(response.status>=200&&response.status<300)return response.json();throw response})},listVoiceClones(workspaceId,page,size,options){let localVarFetchArgs=(0,exports.VoiceCloneApiFetchParamCreator)(configuration).listVoiceClones(workspaceId,page,size,options);return(fetch=isomorphicFetch,basePath=BASE_PATH)=>fetch(basePath+localVarFetchArgs.url,localVarFetchArgs.options).then(response=>{let contentType=response.headers.get("content-type");if(response.status>=200&&response.status<300&&contentType&&-1!==contentType.indexOf("audio/"))return response.blob();if(response.status>=200&&response.status<300&&contentType&&-1!==contentType.indexOf("text/"))return response.text();if(response.status>=200&&response.status<300)return response.json();throw response})},removeVoiceCloneByID(voiceCloneId,options){let localVarFetchArgs=(0,exports.VoiceCloneApiFetchParamCreator)(configuration).removeVoiceCloneByID(voiceCloneId,options);return(fetch=isomorphicFetch,basePath=BASE_PATH)=>fetch(basePath+localVarFetchArgs.url,localVarFetchArgs.options).then(response=>{let contentType=response.headers.get("content-type");if(response.status>=200&&response.status<300&&contentType&&-1!==contentType.indexOf("audio/"))return response.blob();if(response.status>=200&&response.status<300&&contentType&&-1!==contentType.indexOf("text/"))return response.text();if(response.status>=200&&response.status<300)return response;throw response})},updateVoiceCloneByID(voiceCloneId,body,options){let localVarFetchArgs=(0,exports.VoiceCloneApiFetchParamCreator)(configuration).updateVoiceCloneByID(voiceCloneId,body,options);return(fetch=isomorphicFetch,basePath=BASE_PATH)=>fetch(basePath+localVarFetchArgs.url,localVarFetchArgs.options).then(response=>{let contentType=response.headers.get("content-type");if(response.status>=200&&response.status<300&&contentType&&-1!==contentType.indexOf("audio/"))return response.blob();if(response.status>=200&&response.status<300&&contentType&&-1!==contentType.indexOf("text/"))return response.text();if(response.status>=200&&response.status<300)return response.json();throw response})}}},exports.VoiceCloneApiFactory=function(configuration,fetch,basePath){return{createVoiceClone:(body,options)=>(0,exports.VoiceCloneApiFp)(configuration).createVoiceClone(body,options)(fetch,basePath),listVoiceClones:(workspaceId,page,size,options)=>(0,exports.VoiceCloneApiFp)(configuration).listVoiceClones(workspaceId,page,size,options)(fetch,basePath),removeVoiceCloneByID:(voiceCloneId,options)=>(0,exports.VoiceCloneApiFp)(configuration).removeVoiceCloneByID(voiceCloneId,options)(fetch,basePath),updateVoiceCloneByID:(voiceCloneId,body,options)=>(0,exports.VoiceCloneApiFp)(configuration).updateVoiceCloneByID(voiceCloneId,body,options)(fetch,basePath)}},exports.VoiceCloneApi=class extends BaseAPI{createVoiceClone(body,options){return(0,exports.VoiceCloneApiFp)(this.configuration).createVoiceClone(body,options)(this.fetch,this.basePath)}listVoiceClones(workspaceId,page,size,options){return(0,exports.VoiceCloneApiFp)(this.configuration).listVoiceClones(workspaceId,page,size,options)(this.fetch,this.basePath)}removeVoiceCloneByID(voiceCloneId,options){return(0,exports.VoiceCloneApiFp)(this.configuration).removeVoiceCloneByID(voiceCloneId,options)(this.fetch,this.basePath)}updateVoiceCloneByID(voiceCloneId,body,options){return(0,exports.VoiceCloneApiFp)(this.configuration).updateVoiceCloneByID(voiceCloneId,body,options)(this.fetch,this.basePath)}}}}]);